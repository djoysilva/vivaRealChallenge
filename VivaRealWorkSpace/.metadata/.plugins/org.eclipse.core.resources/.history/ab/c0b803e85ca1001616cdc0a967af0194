package br.com.vivareal.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import br.com.vivareal.beans.Property;
import br.com.vivareal.bo.PropertyBO;

@WebServlet("/propertyServlet")
public class propertyServlet extends HttpServlet{
	private static final long serialVersionUID = 1L;
	PropertyBO bo = new PropertyBO();
	List<Property> listProperty = new ArrayList<Property>();
	
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
		String action = req.getParameter("action");
		switch(action){
			case "create":	Property property = new Property();
							property.setId(Integer.parseInt(req.getParameter("id")));
							property.setTitle(req.getParameter("title"));
							property.setPrice(Double.parseDouble(req.getParameter("price")));
							property.setDescription(req.getParameter("description"));
							property.setX(Integer.parseInt(req.getParameter("latitude")));
							property.setY(Integer.parseInt(req.getParameter("longitude")));
							property.setBeds(Integer.parseInt(req.getParameter("beds")));
							property.setBaths(Integer.parseInt(req.getParameter("baths")));
							property.setSquareMeters(Double.parseDouble(req.getParameter("square")));
														
							try{
								bo.create(property);
								listProperty = bo.readList();
								req.setAttribute("success", "Your property was created with success in " + property.getProvince() + ".");
								req.getRequestDispatcher("createProperty.jsp").forward(req, resp);
													
							}catch(Exception e){
								e.printStackTrace();
							}
							
							break;						
			default: break;				
		}
	}
	

	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String action = req.getParameter("action");
		switch (action){
			case "list":
						try{
							listProperty = bo.readList();
							req.setAttribute("keyList", listProperty);
							req.getRequestDispatcher("listProperty.jsp").forward(req, resp);
						}catch(Exception e){
							e.printStackTrace();
						}
						break;
			
			case "alter":
						try{
						int id = Integer.parseInt(req.getParameter("id"));
						bo.search(id);	
							
						}catch(Exception e){
							e.printStackTrace();
						}
						break;
			
			default: break;			
		}
	}
}
